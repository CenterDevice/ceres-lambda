language: rust
env:
  global:
  - FUNCTIONS="watch-autoscaling"
matrix:
  fast_finish: true
  include:
  - env: TARGET=x86_64-unknown-linux-gnu
    rust: 1.31.0
  - env: TARGET=x86_64-apple-darwin
    rust: 1.31.0
    os: osx
  - env: TARGET=x86_64-unknown-linux-gnu CODECOV=1 RUSTFLAGS="-C link-dead-code"
    rust: stable
  - env: TARGET=x86_64-apple-darwin
    rust: stable
    os: osx
  - env: TARGET=x86_64-unknown-linux-gnu
    rust: beta
  - env: TARGET=x86_64-unknown-linux-gnu
    rust: nightly
  allow_failures:
  - rust: beta
  - rust: nightly
sudo: required
services:
  - docker
before_install:
  - docker --version
script: |
  BASE_DIR=`pwd`
  for function in $FUNCTIONS; do
    cd $function
    cargo test --verbose --all
    cd BASE_DIR
  done
after_success: |
  BASE_DIR=`pwd`
  for function in $FUNCTIONS; do
    cd $function
    if [[ "$TRAVIS_OS_NAME" == "linux" ]]; then
      echo "+++ Building static musl version with $TRAVIS_RUST_VERSION" &&
      docker run --rm -it ekidd/rust-musl-builder:$TRAVIS_RUST_VERSION cargo test --verbose --all &&
      echo "+++ done."
    fi
    if [[ "$TRAVIS_OS_NAME" == "linux" && "$CODECOV" ]]; then
      echo "+++ Checking code coverage" &&
      apt-get install libcurl4-openssl-dev libelf-dev libdw-dev cmake gcc binutils-dev libiberty-dev &&
      wget https://github.com/SimonKagstrom/kcov/archive/master.tar.gz &&
      tar xzf master.tar.gz &&
      cd kcov-master &&
      mkdir build &&
      cd build &&
      cmake .. &&
      make &&
      make install DESTDIR=../../kcov-build &&
      cd ../.. &&
      rm -rf kcov-master &&
      for file in target/debug/ceres-*[^\.d] target/debug/it_*[^\.d]; do mkdir -p "target/cov/$(basename $file)"; ./kcov-build/usr/local/bin/kcov --exclude-pattern=/.cargo,/usr/lib --verify "target/cov/$(basename $file)" "$file"; done &&
      bash <(curl -s https://codecov.io/bash) &&
      echo "Uploaded code coverage." &&
      echo "+++ done"
    fi
    cd BASE_DIR
  done

