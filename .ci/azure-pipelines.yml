---

name: $(Build.sourceBranchName)-$(Date:yyyyMMdd)$(Rev:.r)

# Set global variables
variables:
  crate_name: 'ceres-lambda'
  rust_minimum_version: 1.41.0
  # cf. https://docs.microsoft.com/en-us/azure/devops/pipelines/agents/hosted?view=azure-devops
  linux_image_name: 'ubuntu-18.04'

trigger:
  branches:
    include: ['*']
  tags:
    include: ['*']

schedules:
  - cron: "0 0 * * *"
    displayName: Daily midnight build
    branches:
      include:
        - master

stages:
  - stage: Check_Build_Test
    displayName: "Check, Build, and Test"
    jobs:
      - job: Fmt
        strategy:
          matrix:
            linux-nightly:
              imageName: ${{ variables.linux_image_name }}
              rustup_toolchain: nightly
        pool:
          vmImage: $(imageName)
        steps:
          - template: templates/install_rust.yml
            parameters:
              rustup_toolchain: $(rustup_toolchain)
          - template: templates/version_information.yml
          - script: make fmt-check
            displayName: Run Fmt

      - job: Audit
        strategy:
          matrix:
            linux-stable:
              imageName: ${{ variables.linux_image_name }}
              rustup_toolchain: stable
        pool:
          vmImage: $(imageName)
        # Let's use this image, because it has cargo audit already installed.
        container:
          image: ekidd/rust-musl-builder:$(rustup_toolchain)
          # Required, because Azure is going to add a user which requires root privileges
          options: --user 0:0
        steps:
          # Azure is not using the designated user of the image that has been configured to execute Rust
          - script: |
              cp -r /home/rust/.cargo /home/rust/.rustup $HOME
            displayName: Prepare Container
          - template: templates/version_information.yml
          - script: make audit
            displayName: Run Cargo Audit

      - job: Clippy
        strategy:
          matrix:
            linux-stable:
              imageName: ${{ variables.linux_image_name }}
              rustup_toolchain: stable
        pool:
          vmImage: $(imageName)
        steps:
          - template: templates/install_rust.yml
            parameters:
              rustup_toolchain: $(rustup_toolchain)
          - template: templates/install_dependencies.yml
          - template: templates/version_information.yml
          - script: make clippy
            displayName: Run Clippy

      - job: 'Build_n_Test'
        displayName: "Build and Test"
        strategy:
          matrix:
            linux-minimum-${{ variables.rust_minimum_version }}:
              imageName: ${{ variables.linux_image_name }}
              rustup_toolchain: ${{ variables.rust_minimum_version }}
            linux-stable:
              imageName: ${{ variables.linux_image_name }}
              rustup_toolchain: stable
            linux-beta:
              imageName: ${{ variables.linux_image_name }}
              rustup_toolchain: beta
        pool:
          vmImage: $(imageName)
        container:
          image: ekidd/rust-musl-builder:$(rustup_toolchain)
          # Required, because Azure is going to add a user which requires root privileges
          options: --user 0:0
        steps:
          - template: templates/install_dependencies.yml
          # Azure is not using the designated user of the image that has been configured to execute Rust
          - script: |
              cp -r /home/rust/.cargo /home/rust/.rustup $HOME
            displayName: Prepare Container
          - template: templates/version_information.yml
          - script: |
              make build
            displayName: Cargo build
          - script: |
              make test
            displayName: Cargo test

  - stage: Build_Release_Artefacts
    dependsOn: Check_Build_Test
    displayName: "Build Release Artefacts"
    jobs:
      - job: 'Build_Static_Linux_Binary'
        displayName: "Build Static Linux Binary"
        pool:
          vmImage: ${{ variables.linux_image_name }}
        container:
          image: ekidd/rust-musl-builder:stable
          # Required, because Azure is going to add a user which requires root privileges
          options: --user 0:0
        steps:
          # Azure is not using the designated user of the image that has been configured to execute Rust
          - script: |
              cp -r /home/rust/.cargo /home/rust/.rustup $HOME
            displayName: Prepare Container
          - template: templates/version_information.yml
          - script: |
              cargo build --all --all-features --release
              ls -al target/x86_64-unknown-linux-musl/release/
              echo "##vso[task.setvariable variable=static_linux_binary]target/x86_64-unknown-linux-musl/release/aws-watchtower"
            displayName: Build MUSL Static Binary
          - publish: $(Build.SourcesDirectory)/$(static_linux_binary)
            artifact: Static_Linux_Binary
            displayName: Store Static Linux Binary

            #  - stage: Publish_Release
            #    displayName: "Publish Release"
            #    dependsOn: Build_Release_Artefacts
            #    condition: startsWith(variables['build.sourceBranch'], 'refs/tags/')
            #    jobs:
            #      - job: 'Publish_To_GitHub'
            #        displayName: "Publish to GitHub"
            #        steps:
            #          # Shortcut 'download' cannot be used as it does not restore into the original path; cf. https://docs.microsoft.com/en-us/azure/devops/pipelines/artifacts/pipeline-artifacts?view=azure-devops&tabs=yaml#downloading-artifacts
            #          - task: DownloadPipelineArtifact@2
            #            inputs:
            #              buildType: 'current'
            #              artifactName: 'Static_Linux_Binary'
            #              targetPath: '$(Build.ArtifactStagingDirectory)' 
            #            displayName: "Download Static Linux Binary"
            #          - script: |
            #              ls -al $BUILD_ARTIFACTSTAGINGDIRECTORY && \
            #              mv "$BUILD_ARTIFACTSTAGINGDIRECTORY/${CRATE_BIN_NAME}" "$BUILD_ARTIFACTSTAGINGDIRECTORY/${CRATE_BIN_NAME}-$AGENT_OSARCHITECTURE-musl-static" && \
            #              ls -al $BUILD_ARTIFACTSTAGINGDIRECTORY
            #            displayName: "Prepare Assets for Upload"
            #          - task: GitHubRelease@0
            #            displayName: "Create GitHub Release"
            #            inputs:
            #              gitHubConnection: 'lukaspustina-releaseupload'
            #              repositoryName: '$(Build.Repository.Name)' 
            #              action: create
            #              target: '$(Build.SourceVersion)'
            #              tagSource: 'auto'
            #              tagPattern: 'v.*'
            #              tag: $(tagName)
            #              assets: $(Build.ArtifactStagingDirectory)/*
            #              assetUploadMode: 'delete'
            #              isDraft: false
            #              isPreRelease: false
            #              addChangeLog: true
            #              compareWith: 'lastFullRelease'
