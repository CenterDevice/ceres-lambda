---

name: $(Build.sourceBranchName)-$(Date:yyyyMMdd)$(Rev:.r)

# Set global variables
variables:
  crate_name: 'ceres-lambda'
  rust_minimum_version: 1.41.0
  # cf. https://docs.microsoft.com/en-us/azure/devops/pipelines/agents/hosted?view=azure-devops
  linux_image_name: 'ubuntu-18.04'

trigger:
  branches:
    include: ['*']
  tags:
    include: ['*']

schedules:
  - cron: "0 0 * * *"
    displayName: Daily midnight build
    branches:
      include:
        - master
    always: true

stages:
  - stage: Check_Build_Test
    displayName: "Check, Build, and Test"
    jobs:
      - job: Fmt
        strategy:
          matrix:
            linux-nightly:
              imageName: ${{ variables.linux_image_name }}
              rustup_toolchain: stable
        pool:
          vmImage: $(imageName)
        steps:
          - template: templates/install_rust.yml
            parameters:
              rustup_toolchain: $(rustup_toolchain)
          - template: templates/version_information.yml
          - script: make fmt-check
            displayName: Run Fmt

      - job: Audit
        strategy:
          matrix:
            linux-stable:
              imageName: ${{ variables.linux_image_name }}
              rustup_toolchain: stable
        pool:
          vmImage: $(imageName)
        # Let's use this image, because it has cargo audit already installed.
        container:
          image: ekidd/rust-musl-builder:$(rustup_toolchain)
          # Required, because Azure is going to add a user which requires root privileges
          options: --user 0:0
        steps:
          # Azure is not using the designated user of the image that has been configured to execute Rust
          - script: |
              cp -r /home/rust/.cargo $HOME
              # .rustup does not exist on newer builder images
              cp -r /home/rust/.rustup $HOME || true
            displayName: Prepare Container
          - template: templates/version_information.yml
          - script: make audit
            displayName: Run Cargo Audit

      - job: Clippy
        strategy:
          matrix:
            linux-stable:
              imageName: ${{ variables.linux_image_name }}
              rustup_toolchain: stable
        pool:
          vmImage: $(imageName)
        steps:
          - template: templates/install_rust.yml
            parameters:
              rustup_toolchain: $(rustup_toolchain)
          - template: templates/install_dependencies.yml
          - template: templates/version_information.yml
          - script: make clippy
            displayName: Run Clippy

      - job: 'Build_n_Test'
        displayName: "Build and Test"
        strategy:
          matrix:
            linux-minimum-${{ variables.rust_minimum_version }}:
              imageName: ${{ variables.linux_image_name }}
              rustup_toolchain: ${{ variables.rust_minimum_version }}
            linux-stable:
              imageName: ${{ variables.linux_image_name }}
              rustup_toolchain: stable
            linux-beta:
              imageName: ${{ variables.linux_image_name }}
              rustup_toolchain: beta
        pool:
          vmImage: $(imageName)
        container:
          image: ekidd/rust-musl-builder:$(rustup_toolchain)
          # Required, because Azure is going to add a user which requires root privileges
          options: --user 0:0
        steps:
          - template: templates/install_dependencies.yml
          # Azure is not using the designated user of the image that has been configured to execute Rust
          - script: |
              cp -r /home/rust/.cargo $HOME
              # .rustup does not exist on newer builder images
              cp -r /home/rust/.rustup $HOME || true
            displayName: Prepare Container
          - template: templates/version_information.yml
          - script: |
              make build
            displayName: Cargo build
          - script: |
              make test
            displayName: Cargo test

  - stage: Build_Release_Artefacts
    dependsOn: Check_Build_Test
    displayName: "Build Release Artefacts"
    jobs:
      - job: 'Build_Static_Linux_Binary'
        displayName: "Build Static Linux Binary"
        pool:
          vmImage: ${{ variables.linux_image_name }}
        container:
          image: ekidd/rust-musl-builder:stable
          # Required, because Azure is going to add a user which requires root privileges
          options: --user 0:0
        steps:
          # Azure is not using the designated user of the image that has been configured to execute Rust
          - script: |
              cp -r /home/rust/.cargo $HOME
              # .rustup does not exist on newer builder images
              cp -r /home/rust/.rustup $HOME || true
            displayName: Prepare Container
          - template: templates/version_information.yml
          - script: |
              cargo build --all --all-features --release
              ls -al target/x86_64-unknown-linux-musl/release/
            displayName: Build MUSL Static Binary
          - template: templates/store_artifacts.yml
            parameters:
              artifact_names:
                - aws-watchtower

  - stage: Publish_Release
    displayName: "Publish Release"
    dependsOn: Build_Release_Artefacts
    condition: startsWith(variables['build.sourceBranch'], 'refs/tags/')
    jobs:
      - job: 'Publish_To_GitHub'
        displayName: "Publish to GitHub"
        steps:
          - template: templates/download_artifacts.yml
            parameters:
              artifact_names:
                - aws-watchtower
              path: $(Build.ArtifactStagingDirectory)
          - task: GitHubRelease@0
            displayName: "Create GitHub Release"
            inputs:
              gitHubConnection: 'lukaspustina-releaseupload'
              repositoryName: '$(Build.Repository.Name)'
              action: create
              target: '$(Build.SourceVersion)'
              tagSource: 'auto'
              tagPattern: 'v.*'
              tag: $(tagName)
              assets: $(Build.ArtifactStagingDirectory)/*
              assetUploadMode: 'delete'
              isDraft: false
              isPreRelease: false
              addChangeLog: true
              compareWith: 'lastFullRelease'
